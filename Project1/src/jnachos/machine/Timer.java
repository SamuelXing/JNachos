/**
 * Copyright (c) 1992-1993 The Regents of the University of California.
 * All rights reserved.  See copyright.h for copyright notice and limitation 
 * of liability and disclaimer of warranty provisions.
 *  
 *  Created by Patrick McSweeney on 12/5/08.
 */
package jnachos.machine;

import jnachos.kern.*;
import java.util.Random;

/**
 * Routines to emulate a hardware timer device.
 *
 * A hardware timer generates a CPU interrupt every X milliseconds. This means
 * it can be used for implementing time-slicing.
 *
 * We emulate a hardware timer by scheduling an interrupt to occur every time
 * stats->totalTicks has increased by TimerTicks.
 *
 * In order to introduce some randomness into time-slicing, if "doRandom" is
 * set, then the interrupt is comes after a random number of ticks.
 *
 * Remember -- nothing in here is part of Nachos. It is just an emulation for
 * the hardware that Nachos is running on top of.
 *
 */
public class Timer implements VoidFunctionPtr {
	/** If true a random time delay is used. */
	private boolean mRandomize;

	/** The timer interrupt handler. */
	private VoidFunctionPtr mHandler;

	/** The parameter for the timer interrupt handler. */
	private Object mArg;

	/** The random number generator. */
	private Random mRandom;

	/**
	 * Initialize a hardware timer device. Save the place to call on each
	 * interrupt, and then arrange for the timer to start generating interrupts.
	 *
	 * @param pTimerHandler
	 *            is the interrupt handler for the timer device. It is called
	 *            with interrupts disabled every time the the timer expires.
	 * @param pCallArg
	 *            is the parameter to be passed to the interrupt handler.
	 * @param pDoRandom
	 *            if true, arrange for the interrupts to occur at random,
	 *            instead of fixed, intervals.
	 */
	public Timer(VoidFunctionPtr pTimerHandler, Object pCallArg, boolean pDoRandom) {
		mRandomize = pDoRandom;
		Integer seed = (Integer) pCallArg;
		if (mRandomize) {
			mRandom = new Random(seed.intValue());
			System.out.println("Seed: " + seed);
		}

		mHandler = pTimerHandler;
		mArg = pCallArg;

		// schedule the first interrupt from the timer device
		Interrupt.schedule(this, this, TimeOfNextInterrupt(), InterruptType.TimerInt);
	}

	/**
	 * The call back function to be called when the time has run out.
	 * 
	 * @param pDummy
	 *            is not used.
	 */
	public void call(Object pDummy) {
		TimerExpired();
	}

	/**
	 * Routine to simulate the interrupt generated by the hardware timer device.
	 * Schedule the next interrupt, and invoke the interrupt handler.
	 */
	public void TimerExpired() {
		// schedule the next timer device interrupt
		Interrupt.schedule(this, this, TimeOfNextInterrupt(), InterruptType.TimerInt);

		// invoke the Nachos interrupt handler for this device
		mHandler.call(mArg);
	}

	/**
	 * Return when the hardware timer device will next cause an interrupt. If
	 * randomize is turned on, make it a (pseudo-)random delay.
	 * 
	 * @return The time for the next timer interrupt.
	 */
	public int TimeOfNextInterrupt() {
		if (mRandomize)
			return (mRandom.nextInt(Statistics.TimerTicks * 2 - 1) + 1);
		else
			return Statistics.TimerTicks;
	}
}
